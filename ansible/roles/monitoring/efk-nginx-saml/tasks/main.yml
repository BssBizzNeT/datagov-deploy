---

- name: Removing previous configs
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /etc/shibboleth
    - /etc/nginx

- name: Ensure dependencies for building from source are installed (to compile nignx)
  apt: "pkg={{ item }} state=installed update_cache=yes"
  with_items:
    - make
    - supervisor
    - libpcre3
    - libpcre3-dev

- name: Remove any installed shibboleth sp2 ( Ubuntu 16.04 )
  apt: "pkg={{ item }} state=absent purge=yes"
  with_items:
    - shibboleth-sp2-utils
  when: ansible_distribution_version == '16.04'

- name: Install shibboleth sp2 ( Ubuntu 16.04 )
  apt: "pkg={{ item }} state=installed"
  with_items:
    - shibboleth-sp2-utils
  when: ansible_distribution_version == '16.04'

- name: Remove any installed shibboleth sp2 ( Ubuntu 14.04 )
  apt: "pkg={{ item }} state=absent purge=yes"
  with_items:
    - libapache2-mod-shib2
  when: ansible_distribution_version == '14.04'

- name: Install shibboleth sp2 ( Ubuntu 14.04 )
  apt: "pkg={{ item }} state=installed"
  with_items:
    - build-essential
    - shibboleth-sp2-schemas
    - libapache2-mod-shib2
  when: ansible_distribution_version == '14.04'

- name: Creates /var/log/shibboleth directory
  file: path=/var/log/shibboleth state=directory mode=0600 group=_shibd owner=_shibd

- name: Downloads metadata into metadata directory as backup
  get_url: >
    url={{ shibboleth.idp_entity_id }}
    dest=/etc/shibboleth/metadata.xml
    mode=0640
    group=_shibd
    owner=_shibd

- name: writes out key and pem file
  template: src=shibboleth/{{ item }} dest=/etc/shibboleth/{{ item }}  group=_shibd owner=_shibd mode=0600
  with_items:
    - sp-cert.pem
    - sp-key.pem
  notify: restart shibd

- name: writes out configuration files
  template: src=shibboleth/{{ item }} dest=/etc/shibboleth/{{ item }}  group=_shibd owner=_shibd mode=0644
  with_items:
#    - attribute-map.xml
    - shibboleth2.xml
  notify: restart shibd
  tags: asdf

- name: setup supervisor for fastcgi socks
  template:
    src: shibboleth/shib-supervisor.conf
    dest: /etc/supervisor/conf.d/shib.conf
  notify: restart supervisor

- name: Get required sources
  unarchive: "src={{ item }} dest=/tmp remote_src=yes"
  with_items:
    - http://zlib.net/zlib-1.2.11.tar.gz
    - https://www.openssl.org/source/openssl-1.0.2l.tar.gz
    - https://github.com/nginx-shib/nginx-http-shibboleth/archive/v2.0.1.tar.gz
    - http://nginx.org/download/nginx-1.11.13.tar.gz

#- name: Generate self signed ssl certs
#  command: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 3650 -nodes -subj "/C=US/ST=DC/L=Washington/O=GSA/OU=Org/CN=*.prod-ocsit.bsp.gsa.gov"
#  args:
#    chdir: /etc/ssl
#  tags: skip_ansible_lint

- name: Install zlib lib
  shell: ./configure && make && make install
  args:
    chdir: /tmp/zlib-1.2.11
  tags: skip_ansible_lint

- name: Install openssl lib
  shell: ./config --prefix=/usr && make && make install
  args:
    chdir: /tmp/openssl-1.0.2l
  tags: skip_ansible_lint

- name: Add nginx user
  user:
    name: nginx

- name: Install and compile nginx
  shell: |
    ./configure \
      --prefix=/usr/local/nginx \
      --sbin-path=/usr/sbin/nginx \
      --conf-path=/etc/nginx/nginx.conf \
      --error-log-path=/var/log/nginx/error.log \
      --http-log-path=/var/log/nginx/access.log \
      --pid-path=/var/run/nginx.pid \
      --user=nginx \
      --group=nginx \
      --lock-path=/run/lock/subsys/nginx \
      --with-pcre \
      --with-zlib=../zlib-1.2.11 \
      --with-http_ssl_module \
      --with-stream \
      --with-mail=dynamic \
      --add-module=/tmp/nginx-http-shibboleth-2.0.1
    make
    make install
  args:
    chdir: /tmp/nginx-1.11.13
  tags: skip_ansible_lint

- name: Nginx config folder
  file:
    path: /etc/nginx/sites-enabled
    state: directory

- name: Copy nginx config
  template:
    src: nginx/nginx.conf
    dest: /etc/nginx/nginx.conf
    mode: '0644'

- name: Copy nginx vhost
  template:
    src: nginx/nginx-vhost.conf
    dest: /etc/nginx/sites-enabled/monitoring.conf
    mode: '0644'

- name: Add nginx service (Ubuntu 16.04)
  template:
    src: nginx/nginx.service
    dest: /lib/systemd/system/nginx.service
    mode: '0644'
  register: nginx_service_added
  when: ansible_distribution_version == '16.04'

- name: Copying SSL certs
  template:
    src: "nginx/web_{{ item }}"
    dest: "/etc/ssl/{{ item }}"
  with_items:
    - cert.pem
    - key.pem

- name: Reload systemctl config (Ubuntu 16.04)
  command: systemctl daemon-reload
  when: ansible_distribution_version == '16.04' and nginx_service_added is defined

- name: Add nginx service (Ubuntu 14.04)
  template:
    src: nginx/daemon.u14.04.conf
    dest: /etc/init/nginx.conf
    mode: '0644'
  register: nginx_service_added
  when: ansible_distribution_version == '14.04'

- name: Reload upstart config (Ubuntu 14.04)
  command: initctl reload-configuration
  when: ansible_distribution_version == '14.04' and nginx_service_added is defined

- name: Restart shibd
  service: name=shibd state=restarted
  notify: restart supervisor

- name: Restart nginx
  service: name=nginx state=restarted

#- fail: msg="success"

- name: Copy .htpasswd
  template:
    src: nginx/.htpasswd.j2
    dest: /etc/nginx/.htpasswd
    mode: '0755'
  notify:
    - restart nginx
